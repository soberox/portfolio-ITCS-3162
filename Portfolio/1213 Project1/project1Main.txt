import java.util.*;

/***
* ADD YOUR NECESSARY FILES HERE. IF YOU NEED TO ADD ANOTHER FILE, CLICK THE FILE BUTTON ON THE LEFT OF THIS IDE
* AND ADD ACCORDINGLY.
*/
class Main{
    public static void main(String [] args){
        History purchase = new History();
        Availability stock = new Availability;

        Scanner sc = new Scanner(System.in);

        boolean driver = true;

        while (driver){
            System.out.println("Welcome to the autmated bookstore system, or ABS \n What do you want to perform? \n 1. enter a customer purchase \n 2. check customer history \n 3. see inventory availability \n 4. EXIT");
            int input = sc.nextInt();
            
            switch(input){
                case 1;
                    if (stock.getStockList().size() > 0){
                        System.out.println("Stock must be set up");
                        break
                    }
                    System.out.println("how many books?");
                    int books = sc.nextInt();
                    System.out.println("how many DVDs?");
                    int DVDs = sc.nextInt();
                    System.out.println("how many CDs?");
                    int CDs = sc.nextInt();
                    if (books < stock.getStockList().get(stock.getStockList().size() - 1).getBookStock()||
                     DVDs < stock.getStockList().get(stock.getStockList().size() - 1).getDVDStock()||
                      CDs < stock.getStockList().get(stock.getStockList().size() - 1).getCDStock()){
                        if (books < stock.getStockList().get(stock.getStockList().size() - 1).getBookStock()){
                            System.out.println("Sorry but we dont have " + books + "books");
                        }
                        if (DVDs < stock.getStockList().get(stock.getStockList().size() - 1).getDVDStock()){
                            System.out.println("Sorry but we dont have " + DVDs + "books");
                        }
                        if (CDs < stock.getStockList().get(stock.getStockList().size() - 1).getCDStock()){
                            System.out.println("Sorry but we dont have " + CDs + "books");
                        }
                        break;
                    }
                    System.out.print("Check if the customer is a registered member, input his name");
                    String input = sc.nextLine();
                    if (purchase.getOrderList().customerInList(input) == false){
                        System.out.println("Looks like the customer is new, ask them if the would like the garbage membership (N) or the holy membership (Y)?");
                        boolean member;
                        if (input.substring(0,1) == "Y" || input.substring(0,1) == "y"){
                            member = true;
                        } else if (input.substring(0,1) == "N" || input.substring(0,1) == "n"){
                            member = false;
                        } else{
                            System.out.println("UNCLEAr, this is a members only store. Customer can't shop here!");
                            break;
                        }
                        System.out.print("PROCESSING ORDER.....\n\n PROCESSING\n\n\n DONE\n");
                        purchase.addOrder(books, DVDs, CDs, member);
                        System.out.println("PRINTED RECEIPT \n/////////////////////////////////////////////////////////////\n Book: "+ books*(stock.getBookPrice()) + "$ \n DVD: "+ DVDs*(stock.getDVDPrice()) + "$ \n CD: "+ CDs*(stock.getCDPrice()) + "$ \n membership fee: "+ feeCost(member)+ "$ \n total: " + ((books*(stock.getBookPrice())) + (DVDs*(stock.getDVDPrice())) + (CDs*(stock.getCDPrice())) + (feeCost(member)) + "$ \n/////////////////////////////////////////////////////////////");
                        break
                    } else if (purchase.getOrderList().customerInList(input)){
                        int cutomerID = purchase.getOrderList().customerSeqSearch(input);
                        String customerSystemName = purchase.getOrderList().get(customerID).getCustomerName();
                        System.out.print("PROCESSING ORDER.....\n\n PROCESSING\n\n\n DONE\n");
                        System.out.println("PRINTED RECEIPT \n/////////////////////////////////////////////////////////////\n Book: "+ books*(stock.getBookPrice()) + "$ \n DVD: "+ DVDs*(stock.getDVDPrice()) + "$ \n CD: "+ CDs*(stock.getCDPrice()) + "$ \n total: " + ((books*(stock.getBookPrice())) + (DVDs*(stock.getDVDPrice())) + (CDs*(stock.getCDPrice())) + (feeCost(member)) + "$ \n/////////////////////////////////////////////////////////////");
                        purchase.getOrderList().get(custmerID).addbook(books);
                        purchase.getOrderList().get(custmerID).addDVD(DVDs);
                        purchase.getOrderList().get(custmerID).addCD(CDs);
                        break
                    }

                case 2;
                    if (purchase.getOrderList().size() < 0){
                        System.out.print("You have no customer in your history");
                        break;
                    }
                    System.out.println("Pick an option: \n 1. get customer list \n 2. search customer by name \n 3. EXIT");
                    int option = nextInt();
                    switch (option){
                        case 1;
                            System.out.println("Customer List: ")
                            for (int i = 0; i < purchase.getOrderList().size() - 1; i++){
                                int listNumber = purchase.getOrderList().get(i).getNumber();
                                int customerName = purchase.getOrderList().get(i).getCustomerName();
                                String memberType = isMember(purchase.getOrderList().get(i).getMembership());
                                System.out.println( listNumber + ". "+ customerName + " (" + memberType + ") \n");
                            }
                            break;
                        case 2;
                            System.out.print("Input the customer's name to see his billing info");
                            String inputName = sc.nextLine();
                            int cutomerID = purchase.getOrderList().customerSeqSearch(inputName);
                            boolean isCustomer = purchase.getOrderList().customerInList(inputName);
                            String customerSystemName = purchase.getOrderList().get(customerID).getCustomerName();
                            double membershipDue = monthlyCost(isCustomer);
                            double membershipFee = feecost(isCustomer);
                            double preTotal = purchase.getOrderList().totalBeforeMember();
                            double totalBill = pretotal + membershipFee + membershipDue;
                            if (isCustomer){
                                System.out.println(customerSystemName + "'s History \n Membership due: " + membershipDue + "$ \n Membership fee: " + membershipFee + "$ \n Total before membership: " + preTotal + "$ \n total billing: " + totalBill + "$");
                                break
                            } else{
                                System.out.println("customer not found");
                                break
                            }
                        case 3;
                            break;
                    }
                case 3;
                    if(stock.getStockList().size() > 0){
                        System.out.println("You must add a stock list \n first input how many stocks of books you want to order, and then imput their individual price for reference");
                        int bookStock = sc.nextInt();
                        double bookPrice = sc.nextDouble();
                        System.out.println("Now input how many stocks of DVDs you want to order, and then input their individual price for reference");
                        int DVDStock = sc.nextInt();
                        double DVDPrice = sc.nextDouble();
                        System.out.println("Now input how many stocks of CDs you want to order, and then input their individual price for reference");
                        int CDStock = sc.nextInt();
                        double CDPrice = sc.nextDouble();
                        System.out.print("PROCESSING ORDER.....\n\n PROCESSING\n\n\n DONE\n");
                        purchase.addStockList(bookStock, DVDStock, CDStock, bookPrice, DVDPrice, CDPrice);
                        System.out.println("PRINTED RECEIPT \n/////////////////////////////////////////////////////////////\n Book: "+ bookStock*(bookPrice) + "$ \n DVD: "+ DVDStock*(DVDPrice) + "$ \n CD: "+ CDStock*(CDPrice) + "$ \n total: " + ((bookStock*(bookPrice)) + (DVDStock*(DVDPrice)) + (CDStock*(CDPrice)) + "$ \n/////////////////////////////////////////////////////////////");
                    } else{
                        System.out.print("Pick an option: \n 1. view inventory history \n 2. add new inventory list \n 3. EXIT");
                        int option = sc.nextInt();
                        switch(option){
                            case 1;
                                System.out.println("inventory history: ")
                                for (int i = 0; i < purchase.getOrderList().size() - 1; i++){
                                    int listNumber = stock.getStockList().get(i).getStockNumber();
                                    int bookStock = purchase.getOrderList().get(i).getbookStock();
                                    double bookPrice = purchase.getOrderList().get(i).getbookPrice();
                                    int DVDStock = purchase.getOrderList().get(i).getDVDStock();
                                    double DVDPrice= purchase.getOrderList().get(i).getDVDPrice();
                                    int CDStock = purchase.getOrderList().get(i).getCDStock();
                                    double CDPrice = purchase.getOrderList().get(i).getCDPrice();

                                    System.out.println( listNumber + ". \n books " + bookStock + ", " + bookPrice + "$ \n DVDs "+ DVDStock + ", " + DVDPrice + "$ \n CDs "+ CDStock + ", " + CDPrice + "$ \n");
                                }
                                break;
                            case 2;
                                System.out.println("First input how many stocks of books you want to order, and then imput their individual price for reference");
                                int bookStock = sc.nextInt();
                                double bookPrice = sc.nextDouble();
                                System.out.println("Now input how many stocks of DVDs you want to order, and then input their individual price for reference");
                                int DVDStock = sc.nextInt();
                                double DVDPrice = sc.nextDouble();
                                System.out.println("Now input how many stocks of CDs you want to order, and then input their individual price for reference");
                                int CDStock = sc.nextInt();
                                double CDPrice = sc.nextDouble();
                                System.out.print("PROCESSING ORDER.....\n\n PROCESSING\n\n\n DONE\n");
                                purchase.addStockList(bookStock, DVDStock, CDStock, bookPrice, DVDPrice, CDPrice);
                                System.out.println("PRINTED RECEIPT \n/////////////////////////////////////////////////////////////\n Book: "+ bookStock*(bookPrice) + "$ \n DVD: "+ DVDStock*(DVDPrice) + "$ \n CD: "+ CDStock*(CDPrice) + "$ \n total: " + ((bookStock*(bookPrice)) + (DVDStock*(DVDPrice)) + (CDStock*(CDPrice)) + "$ \n/////////////////////////////////////////////////////////////");
                            case 3;
                                break
                        }
                    }
                case 4;
                    break;
            }

        }

    }
}}}